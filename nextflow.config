/*
 * -------------------------------------------------
 *  PredictDb Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {

  // Pipeline Options
  gtf = "file.gtf.gz"
  snp = false
  genotype = false
  gene_exp = false
  prefix = "Model_training"
  outdir = "./results"

  // Workflow flags
  name = false
  help = false
  keepIntermediate = false
  email = false
  email_on_fail = false
  plaintext_email = false
  monochrome_logs = false


  // Defaults only, expecting to be overwritten
  max_memory = 32.GB
  max_cpus = 16
  max_time = 240.h

}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

trace {
  enabled = true
  file = "Reports/trace.txt"
}

dag {
  enabled = true
  file = "Reports/workflow.png"
}

report {
  enabled = true
  file = "Reports/report.html"
}

timeline {
  enabled = true
  file = "Reports/timeline.html"
}

manifest {
  name = 'PredictDb-workflow'
  author = 'Festus Nyasimi'
  homePage = 'https://github.com/hakyimlab/PredictDb-nextflow'
  description = 'PredictDB pipeline is used to train models'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.10.0'
  version = '1.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

